//* -----------------| Master File |-------------------*//
/*
----ESP8266 | DHT 11 | Status LED | OLED 0.96 SD1306 | OneWire | MQTT |
--
  D1: GPIO 5 - Connected to SCL of OLED 
  D2: GPIO 4 - Connected to SDA of OLED
  D3: GPIO 0 - Connected to Temperature Probe
  D4: GPIO 2 - Connected to DHT11
  D7: GPIO 13- Connected to On/Off LED
  D8: GPIO 8 - Connected to Connection LED 
  
//-------
MQTT Topics
--
  room/LED - On/Off Triggers D7 LED to turn on/off
  outTopic - ESP Speaking
  inTopic - ESP Listening
  OWTemp - Onewire Temperature 
  Room/Humidity
  Room/DHTemperature

 */

/**********---| Libraries |---**********/
#include <ESP8266WiFi.h>        //WiFi
#include <Wire.h>               //WiFi
#include <PubSubClient.h>       //MQTT

#include "DHT.h"                //DHT Sensor               

#include <Adafruit_SSD1306.h>   //OLED
#include <Wire.h>               //OLED
#include <Adafruit_GFX.h>       //OLED

#include <OneWire.h>             //OneWire
#include <DallasTemperature.h>   //Onewire
    
#include <ESP8266mDNS.h>        //--OTA 
#include <WiFiUdp.h>            //--OTA 
#include <ArduinoOTA.h>         //--OTA 

/**********--------| Definitions |---------**********/

////--| OLED |---------
#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

// Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

////--| Names itself espClient |---------
//-----Can be changed uniquely if multipe ESPs--////
WiFiClient espClient;
PubSubClient client(espClient);


////--| Wifi Login |---------
const char* ssid = "*****";
const char* password = "*****";

////--| MQTT IP Address - Raspberry Pi IP Address |---------
const char* mqtt_server = "***.***.*.*.***";

////--| DHT |---------
#define DHTTYPE    DHT11

////--| OneWire |---------
const int oneWireBus = 0;     //Connected to D3 so GPIO 0
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);

const int DHTPin = 2;     // DHT Sensor is connected to D4 so GPIO2
const int statusLED = 15; //Connection LED is connected to D8 so GPIO 15
const int LED = 13;       //LED is connected to D7 so GPIO1 13

////--| Initialize DHT |---------
DHT dht(DHTPin, DHTTYPE);

////--| Timer/Auxilar Var |---------
long now = millis();
long lastMeasure = 0;

////--| Connects ESP8266 to router |---------
void setup_wifi() {
  delay(10);
  // We start by connecting to a WiFi network
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }

  randomSeed(micros());
  
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

//-----/********|--MQTT RECEIVER--|**********/-----//
////--| MQTT Action from Message on a Subscription |---------
// This functions is executed when some device publishes a message to a topic that your ESP8266 is subscribed to
// Change the function below to add logic to your program, so when a device publishes a message to a topic that 
// your ESP8266 is subscribed you can actually do something

void callback(char* topic, byte* message, unsigned int length) {
 String messageTemp;
  
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();


// MQTT- LED Receiver with Action
//---------------------------------------------------------------------
// If a message is received on topic “room/LED” it checks if it says 
// “on” or “off”, this then turns the LED GPIO according to the message.
  if(topic=="room/LED"){
      Serial.print("Changing Room LED to ");
      if(messageTemp == "on"){
        digitalWrite(LED, HIGH);
        Serial.print("On");
      }
      else if(messageTemp == "off"){
        digitalWrite(LED, LOW);
        Serial.print("Off");
      }
  }
  Serial.println();
}

//ESP to MQTT Reconnection and Subscription
//---------------------------------------------------------------------
// This functions reconnects your ESP8266 to your MQTT broker
// Change the function below if you want to subscribe to more topics with your ESP8266 

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");
                    // Attempt to connect

// Create a random client ID
    String clientId = "ESP8266Client-";
    clientId += String(random(0xffff), HEX);
    
// Attempt to connect
    if (client.connect(clientId.c_str())) {
      Serial.println("connected to MQTT");
            
      client.publish("outTopic", "hello world");  // Once connected, publish an announcement...
      client.subscribe("inTopic");

  ////--| ESP Subscribe to topic room/LED |---------   
      // Subscribe or resubscribe to a topic
      // You can subscribe to more topics (to control more LEDs)
      client.subscribe("room/LED");
      Serial.println("Subscribed to topic: room/LED");
      client.publish("room/message", "I'm subscribed to room/LED and ready to turn on and off the light.");
    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
      // Wait 5 seconds before retrying
      delay(5000);
    }
  }
}

//-----/********|--VOID SETUP--|**********/-----//
void setup() {

  Serial.println("Booting");

////--| OLED Display |---------
if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
}
    delay(5000);
    display.clearDisplay();
    display.setTextColor(WHITE);
    display.setTextSize(1);
  
  ////--| LED's |---------
   pinMode(LED, OUTPUT);
   pinMode(statusLED, OUTPUT);
  
    digitalWrite(LED, LOW);
   digitalWrite(statusLED, LOW);
  
  dht.begin();
  
  Serial.begin(115200);

  setup_wifi();
    client.setServer(mqtt_server, 1883);
    client.setCallback(callback);


////--| OTA Programming |---------

  ArduinoOTA.onStart([]() {
    Serial.println("Start");
  });
  ArduinoOTA.onEnd([]() {
    Serial.println("\nEnd");
  });
  ArduinoOTA.onProgress([](unsigned int progress, unsigned int total) {
    Serial.printf("Progress: %u%%\r", (progress / (total / 100)));
  });
  ArduinoOTA.onError([](ota_error_t error) {
    Serial.printf("Error[%u]: ", error);
    if (error == OTA_AUTH_ERROR) Serial.println("Auth Failed");
    else if (error == OTA_BEGIN_ERROR) Serial.println("Begin Failed");
    else if (error == OTA_CONNECT_ERROR) Serial.println("Connect Failed");
    else if (error == OTA_RECEIVE_ERROR) Serial.println("Receive Failed");
    else if (error == OTA_END_ERROR) Serial.println("End Failed");
  });
  ArduinoOTA.begin();
  Serial.println("Ready");
  Serial.print("IP address: ");
  Serial.println(WiFi.localIP());

////--| DHT Begin |---------
  sensors.begin();

}

//-----/********|--VOID LOOP--|**********/-----//
void loop() {

  if (!client.connected()) {
    reconnect();
                }
  client.loop();


  now = millis();

////--| Read Sensors every 30 seconds (they are 2 sec delayed) |---------
  if (now - lastMeasure > 5000) { //30 seconds
    lastMeasure = now;
    
    /**********--------| DHT Values |---------**********/
    float h = dht.readHumidity();
    // Read temperature as Celsius (the default)
    float t = dht.readTemperature();
    // Read temperature as Fahrenheit (isFahrenheit = true)
    float f = dht.readTemperature(true);

/**********--------| OneWire Values |---------**********/
  sensors.requestTemperatures(); 
  float temperatureC = sensors.getTempCByIndex(0);
  float temperatureF = sensors.getTempFByIndex(0);

  delay(5000);

    // Check if any reads failed and exit early (to try again).
    if (isnan(h) || isnan(t) || isnan(f)) {
      Serial.println("Failed to read from DHT sensor!");
      return;
    }
                //Computes temperature values in Celsius
               //float hic = dht.computeHeatIndex(t, h, false);
              //static char temperatureTemp[7];
             //dtostrf(hic, 6, 2, temperatureTemp);
    
    ////--| DHT Temperature Value |---------
    float hif = dht.computeHeatIndex(f, h);
    static char temperatureTemp[7];
    dtostrf(hif, 6, 2, temperatureTemp);
    
    ////--| DHT Value |---------
    static char humidityTemp[7];
    dtostrf(h, 6, 2, humidityTemp);

    static char OwTemp[7];
    dtostrf(temperatureF, 6, 2, OwTemp);


/**********--------|  Print |---------**********/   
    
    Serial.print("Topic: room/humidity: ");
    Serial.print("Humidity: ");
    Serial.print(h);
      client.publish("room/humidity", humidityTemp);
    Serial.print("% | Topic: room/DHTemperature: ");
    Serial.print(f);
      client.publish("room/DHTemperature", temperatureTemp);
    Serial.print(" ºF | Heat Index: ");
    Serial.print(hif);
    Serial.print(" ºF | OneWire Temp: ");
    Serial.print(temperatureF);
      client.publish("room/OWTemp", OwTemp);
    Serial.print("ºF | Topic: room/OWTemp ");
    Serial.println("");

        

/**********--------| Display Print |---------**********/
  display.clearDisplay();
  
////--| Display Temperature on OLED |---------
  display.setTextSize(1);
  display.setCursor(0,0);
  display.print("Temperature: ");
  display.setTextSize(2);
  display.setCursor(0,10);
  display.print(f);
  display.print(" ");
  display.setTextSize(1);
  display.cp437(true);
  display.write(167);
  display.setTextSize(2);
  display.print("F");
  
////--| Display Humidity on OLED |---------
  display.setTextSize(1);
  display.setCursor(0, 35);
  display.print("Humidity: ");
  display.setTextSize(2);
  display.setCursor(0, 45);
  display.print(h);
  display.print(" %"); 
 
  
  display.display(); 

  }
} 
