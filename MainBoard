


/**********Include Libraries**********/
/*************************************/
#include <ESP8266WiFi.h>        //For WiFi
#include <DNSServer.h>.         //For WiFiManager
#include <ESP8266WebServer.h>   //For WiFiManager
#include <WiFiManager.h>        //For WiFiManager
#include <Wire.h>               //For 
#include <PubSubClient.h>       //For MQTT
#include "DHT.h"                //For Temp/Hum sensor
/*************************************************/

/**********---Definitions---**********/

#define DHTTYPE    DHT11     // DHT 11

/**************************************/



//Wifi Credentials --------------------------------------
const char* ssid = "Cube Capsule";
const char* password = "Wendover1";


/**********---Constants---**********/

// Raspberry Pi IP address, so it connects to your MQTT broker
const char* mqtt_server = "192.168.1.248";


// Initialize espClient. 
//-------------------------------------------------------------------
//Change the espClient name if there are multiple ESPs running.

WiFiClient espClient;
PubSubClient client(espClient);


const int DHTPin = 2;        // DHT Sensor is connected to D4 so GPIO2
const int statusLED = 15;   //Connection LED is connected to D8 so GPIO 15
const int LED = 13;         // LED is connected to D7 so GPIO1 13

// Initialize DHT sensor.
DHT dht(DHTPin, DHTTYPE);


//Timers--------------------------------------
long now = millis();
long lastMeasure = 0;


// Connects your ESP8266 to router
//------------------------------------------------------------------
//Setup Wifi

void setup_wifi() {
  delay(10);

  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("WiFi connected - ESP IP address: ");
  Serial.println(WiFi.localIP());
}

//Publishing and Functions
//-------------------------------------------------------------------
// Executed when a device publishes a message to a topic that ESP8266 is subscribed to
//****Change the function to add logic to the program, so when a devices publishes a 
//message to a topic that the ESP8266 is subscribed to, something actually happens. 
//Add more if statements to control more GPIO's with MQTT. 


void callback(String topic, byte* message, unsigned int length) {
  Serial.print("Message arrived on topic: ");
  Serial.print(topic);
  Serial.print(". Message: ");
  String messageTemp;
  
  for (int i = 0; i < length; i++) {
    Serial.print((char)message[i]);
    messageTemp += (char)message[i];
  }
  Serial.println();



// Description
//-------------------------------------------------------------------
// If a message is received on the topic room/LED, it checks if it is on or off. 
// Then turns the LED GPIO either on or off, depending on the message


  if(topic=="room/LED"){
      Serial.print("Changing Room LED to ");
      if(messageTemp == "on"){
        digitalWrite(LED, HIGH);
        Serial.print("On");
      }
      else if(messageTemp == "off"){
        digitalWrite(LED, LOW);
        Serial.print("Off");
      }
  }
  Serial.println();
}


// Reconnects ESP8266 to the MQTT Broker
//-------------------------------------------------------------------
// Change this function if I want to subscribe to more topics with the ESP8266
/*   May need to change if problems with multiple connections. 
       if (client.connect("ESP1_Office")) {
         Then, for the other ESP:
        if (client.connect("ESP2_Garage")) {....and so forth
*/

void reconnect() {
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");

    if (client.connect("ESP8266Client")) {
      Serial.println("connected");  // Subscribe or resubscribe to a topic
      client.subscribe("room/LED"); // Cab subscribe to more topics (to control more LEDs if needed)

    } else {
      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");
     
      delay(5000);  // Wait 5 seconds before retrying
    }
  }
}




//-----/**********--VOID SETUP--**********/-----//
//**********************************************//


void setup() {
  pinMode(LED, OUTPUT);
  pinMode(statusLED, OUTPUT);
  
  digitalWrite(LED, LOW);
  digitalWrite(statusLED, LOW);
  
  dht.begin();
  
  Serial.begin(115200);

  //setup_wifi();

  client.setServer(mqtt_server, 1883);  //Sets the MQTT Broker
  client.setCallback(callback);         //Callback is what receives messages that control the LEDs

  WiFiManager wifiManager;
  wifiManager.autoConnect("AutoConnectAP");
  Serial.println("Connected to WiFi");

}


//-----/**********--VOID LOOP--**********/-----//
//********************************************//
    //  No need to change anything in loop. 
    //  All loop will do is ensure that ESP is connected to the MQTT broker. 


void loop() {

  if (!client.connected()) {
    digitalWrite(statusLED, HIGH);
    reconnect();
  }
  if(!client.loop())
    client.connect("ESP8266Client");

  now = millis();
  
  if (now - lastMeasure > 30000) {  // Publishes new temperature and humidity every 30 seconds
    lastMeasure = now;
 
    float h = dht.readHumidity();
    float t = dht.readTemperature();
    float f = dht.readTemperature(true);

    //Check if any sensors failed -----------------------------------------
  if (isnan(h) || isnan(t) || isnan(f)) {
     Serial.println("Failed to read from DHT sensor!");
     return;
    }


//Celsius Conversion ------------------------------------------------------
    /*
    //float hic = dht.computeHeatIndex(t, h, false);
    //static char temperatureTemp[7];
    //dtostrf(hic, 6, 2, temperatureTemp);
    */

    //Computes Farenheit --------------------------------------
    float hif = dht.computeHeatIndex(f, h);
    static char temperatureTemp[7];
    dtostrf(hif, 6, 2, temperatureTemp);
    
    static char humidityTemp[7];
    dtostrf(h, 6, 2, humidityTemp);


    //Publish Temp and Humidity Values --------------------------------------
    client.publish("room/temperature", temperatureTemp);
    client.publish("room/humidity", humidityTemp);
    
    Serial.print("Humidity: ");
    Serial.print(h);
    Serial.print(" %\t Temperature: ");
    //Serial.print(t);
    //Serial.print(" *C ");
    Serial.print(f);
    Serial.print(" *F\t Heat index: ");
    //Serial.print(hic);
    //Serial.println(" *C ");
    Serial.print(hif);
    Serial.println(" *F");
  }
} 
